¿QUÉ ES GIT?
Git es un sistema de control de versiones distribuido, lo que significa que un clon local del proyecto es un 
repositorio de control de versiones completo. Estos repositorios locales plenamente funcionales permiten trabajar sin conexión o
de forma remota con facilidad. Los desarrolladores confirman su trabajo localmente y, a continuación, sincronizan su copia 
del repositorio con la copia en el servidor. Este paradigma es distinto del control de versiones centralizado, donde los clientes 
deben sincronizar el código con un servidor antes de crean un nuevas versiones.

TRABAJO EN EQUIPO
Los cambios de todos localmente se pueden cerntralizar en un repositorio donde todas las versiones pueden confluir.

PRIMER PASOS PARA HACER TODA LA CONFIGURACIÓN
esto hacerlo en la consola de git 'git bash'
git config --global user.name "Nombre de usuario en github"
git config --global user.emal"Email del repositorio remoto"
git config --global core.editor "code --wait" 'code es la palabra clave de vsc si tienes otro editor buscar su palabra clave'
git config --global -e 'este -e va abrir un archivo donde tenemos lo que acabamos de escribir'
para el salta de linea en windows:
git config --global core.autocrlf true 'true para windows input para mac o linux'
git config --global -h 'Nos trae todas las ayudas para mostrarnos todo lo que podemos hacer'

COMANDOS BÁSICOS DE LA TERMINAL(LINUX)  GIT BASH
- ls 'Es el comando para ver el listado de carpetas de donde estamos parados'si fuera en windows utilizamos (dir)''
- ls -a 'es para que nos muestre todas los archivos incluso los ocultos'
- cd 'nombre de la carpeta a la que quieres entrar'
- pwd 'Nos muestra la ruta completa de la carpeta donde estamos'
- cd .. para salir de la carpeta actual
- ./ significa en nuestra carpeta
- ../ significa en la carpeta anterior
- ./nombre de la carpeta significa adentro de la carpeta
- mkdir 'nombre de la carpeta' esto nos sirve para crear una carpeta o un directorio
- git init para inicializar un repositorio basio de git en la carpeta seleccionada
- code . para abrir vsc desde la carpeta en la que estemos 'todo esto se esta haciendo desde la terminal de git bash'
- se puede colocar la terminal de git bash en vsc

COMANDOS DE GIT
- git status'Es un comando que nos permitira ver en que estado se encuentra los archivos actualmente'
el status nos muestra lo que esta listo para hacer el commit
- git status -s para mostranos una información mas compacta (M y el nombre del archivo, si muestra la M en rojo es por que
se agredo el archivo modifiacado al git add si aparece un ?? es porque el archivo no se agredado y no existe para el commit,
si aprece una A significa que el archivo se a agrado y la M es de modifiacado)
- git add nombre del archivo que quieres craquear o git add . para agregar todos los archivos de una vez
- git rm --cached nombre del archivo que quieres sacar del state
esto se hace cuando se modifiaca el archivo que agragaste:
- (use "git add <file>..." to update what will be committed) para actualizar el archivo con las modificaciones que hicimos
- (use "git restore <file>..." to discard changes in working directory) para que estos cambios se pierdan y vuelvan a como estaban antes
cuando hagas esto los archivos quedan listos para hacerles el commit
- git commit -m "Se actualizo la información del archivo 2"

GIT .IGNORE
es un archivo de configuración en el cúal vamos a poner todos los archivos y carpetas que van a ser ignoradas por git
no van a ser fografiadas y tampoco van hacer subidos a un repositorio. ¿Porque usamos este archivo? por que hay un montón de archivos
que se generan solos o que no queremos que se subán.   

ARCHIVOS QUE SE IGNORAN
- .env: es un archivo donde se pone la variables de entorno que nosotros no queremos que nadie se entere por que en este archivo 
manejamos contraseñas, o suele haber usuarios y password para poder entrar a las bases de datos entonces las variables de entorno
se suelen agregar a .gitignore para que no se comporta.
- node_modules
- si tubieramos muchos archivos (de imagenes jpg) *.jpg lo mismo con video *.mp4

ejemplo = creamos una carper .gitignore y otra carpeta .env agrgamos el nombre completo al archivo gitignore y despues de eso 
hacemos el git add y despúes el git commit -m y veremos como solo aparece la carpeta de gitignore y la carpeta .env que creamos
no aparece cuando hacemos el git status.

comando git diff para ver la diferencia de un archivo antes y un archivo despues para poder hacer una fotografia con git commit
si corresponde o no en base a lo que necesitemos.

COMO VER LOS COMMITS
los commits son como una fotografia dentro de una pelicula por lo cual vamos a ver uno atras de otro 
y vamos a ver donde estamos parados en esa pelicula.
- git log 'Nos muestra mucha información sobre todos los commits que hemos hecho'
- git log --oneline 'para que nos muestre la información en una sola lineas y se pueda entender mejor'

¿QUE ES UNA BRANCH/RAMA?
si nosotros tenemos un flujo que tenemos de nuestro código y vamos haciendo un control de versiones
haciendo estas fotografias, nosotros posemos hacer flujos alternativos para poder hacer distintsas
caractaristicas a la par sin tocar el flujo principal.

EJEMPLO
vamos a ver las branch/ramas como si fueran una pelicula y cada uno de los fotogramas son un commit
entonces cada ves que hacemos una fotografia a nuestro código, hacemos como una especie de frame
o una especie de fotograma en la pelicula, en donde estamos parados nosotros es el commit head,
entonces tenemos una sola rama que seria una sola pelicula y tenemos que cada fotograma es un commit

BRANCH Y CHECKOUT

